---
// No props needed - this is a global search component
---

<div class="search-container" id="search-container">
  <div class="search-box">
    <div class="search-input-wrapper">
      <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <input 
        type="text" 
        id="search-input" 
        placeholder="Search recipes, conversions, tips..." 
        autocomplete="off"
        aria-label="Search blog posts"
      />
      <button class="search-clear" id="search-clear" aria-label="Clear search" style="display: none;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    <div class="search-results" id="search-results" style="display: none;">
      <div class="search-results-header">
        <span class="results-count" id="results-count">0 results</span>
        <button class="close-search" id="close-search" aria-label="Close search">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <div class="search-results-list" id="search-results-list">
        <!-- Results will be populated here -->
      </div>
      <div class="search-footer">
        <button class="view-all-results" id="view-all-results" style="display: none;">
          View All Results
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-box {
    position: relative;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: #FFF8ED;
    border: 2px solid #FFE4CC;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    transition: all 0.2s ease;
  }

  .search-input-wrapper:focus-within {
    border-color: #FF6B35;
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
  }

  .search-icon {
    color: #666;
    margin-right: 0.75rem;
    flex-shrink: 0;
  }

  #search-input {
    flex: 1;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: #333;
    outline: none;
    font-family: 'Open Sans', Arial, Helvetica, sans-serif;
  }

  #search-input::placeholder {
    color: #999;
  }

  .search-clear {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: color 0.2s ease;
    margin-left: 0.5rem;
  }

  .search-clear:hover {
    color: #FF6B35;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #FFE4CC;
    border-top: none;
    border-radius: 0 0 8px 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 400px;
    overflow-y: auto;
  }

  .search-results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #FFE4CC;
    background: #FFF8ED;
  }

  .results-count {
    font-size: 0.9rem;
    color: #666;
    font-weight: 500;
  }

  .close-search {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: color 0.2s ease;
  }

  .close-search:hover {
    color: #FF6B35;
  }

  .search-results-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .search-result-item {
    padding: 1rem;
    margin: 0.5rem 0;
    border: 1px solid #f0f0f0;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    background: white;
  }

  .search-result-item:hover,
  .search-result-item.highlighted {
    background: #FFF8ED;
    border-color: #FF6B35;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(255, 107, 53, 0.1);
  }

  .search-result-item:last-child {
    margin-bottom: 0;
  }

  .search-result-title {
    font-size: 1rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.25rem;
    line-height: 1.3;
  }

  .search-result-excerpt {
    font-size: 0.85rem;
    color: #666;
    line-height: 1.4;
    margin-bottom: 0.5rem;
  }

  .search-result-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.75rem;
    color: #999;
  }

  .search-result-category {
    background: #FF6B35;
    color: white;
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .search-footer {
    padding: 0.75rem 1rem;
    border-top: 1px solid #FFE4CC;
    background: #FFF8ED;
    text-align: center;
  }

  .view-all-results {
    background: #FF6B35;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .view-all-results:hover {
    background: #e55a2b;
  }

  .no-results {
    padding: 2rem 1rem;
    text-align: center;
    color: #666;
  }

  .no-results svg {
    color: #ccc;
    margin-bottom: 0.5rem;
  }

  .search-loading {
    padding: 1rem;
    text-align: center;
    color: #666;
  }

  .search-loading::after {
    content: '';
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #FF6B35;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
    margin-left: 0.5rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .search-container {
      max-width: 100%;
    }
    
    .search-results {
      max-height: 300px;
    }
    
    .search-result-item {
      padding: 0.75rem;
    }
    
    .search-result-title {
      font-size: 0.9rem;
    }
    
    .search-result-excerpt {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const searchResultsList = document.getElementById('search-results-list');
    const resultsCount = document.getElementById('results-count');
    const searchClear = document.getElementById('search-clear');
    const closeSearch = document.getElementById('close-search');
    const viewAllResults = document.getElementById('view-all-results');
    
    let searchTimeout;
    let allPosts = [];
    let isSearchVisible = false;
    let currentHighlightIndex = -1;
    let searchResultsData = [];

    // Load all posts data
    async function loadPostsData() {
      try {
        const response = await fetch('/search-data.json');
        if (response.ok) {
          allPosts = await response.json();
        } else {
          // Fallback: empty array if no data available
          allPosts = [];
        }
      } catch (error) {
        console.error('Error loading posts data:', error);
        allPosts = [];
      }
    }

    // Fallback function to load posts from static data
    async function loadStaticPostsData() {
      // This would be populated with your actual posts data
      // For now, return empty array - you'll need to implement this
      return [];
    }

    // Search function - only search titles
    function searchPosts(query) {
      if (!query.trim() || allPosts.length === 0) {
        hideResults();
        return;
      }

      const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 0);
      
      const results = allPosts.filter(post => {
        const titleText = post.title.toLowerCase();
        return searchTerms.every(term => titleText.includes(term));
      });

      // Sort by relevance (exact title matches first)
      results.sort((a, b) => {
        const aTitleMatch = a.title.toLowerCase().includes(query.toLowerCase());
        const bTitleMatch = b.title.toLowerCase().includes(query.toLowerCase());
        
        if (aTitleMatch && !bTitleMatch) return -1;
        if (!aTitleMatch && bTitleMatch) return 1;
        
        return 0;
      });

      searchResultsData = results.slice(0, 10); // Store results for keyboard navigation
      displayResults(searchResultsData);
    }

    // Display search results
    function displayResults(results) {
      if (results.length === 0) {
        searchResultsList.innerHTML = `
          <div class="no-results">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <p>No results found</p>
            <p style="font-size: 0.8rem; margin-top: 0.5rem;">Try different keywords or check your spelling</p>
          </div>
        `;
      } else {
        searchResultsList.innerHTML = results.map((post, index) => `
          <div class="search-result-item" data-index="${index}" onclick="window.location.href='${post.url}'">
            <div class="search-result-title">${post.title}</div>
            <div class="search-result-meta">
              <span class="search-result-category">${post.category}</span>
              <span>${new Date(post.pubDate).toLocaleDateString()}</span>
            </div>
          </div>
        `).join('');
      }

      resultsCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''}`;
      showResults();
    }

    // Show/hide results
    function showResults() {
      searchResults.style.display = 'block';
      isSearchVisible = true;
      currentHighlightIndex = -1;
    }

    function hideResults() {
      searchResults.style.display = 'none';
      isSearchVisible = false;
      currentHighlightIndex = -1;
    }

    // Keyboard navigation functions
    function highlightResult(index) {
      // Remove previous highlight
      const allItems = searchResultsList.querySelectorAll('.search-result-item');
      allItems.forEach(item => item.classList.remove('highlighted'));
      
      // Add highlight to current item
      if (index >= 0 && index < allItems.length) {
        allItems[index].classList.add('highlighted');
        allItems[index].scrollIntoView({ block: 'nearest' });
      }
    }

    function navigateResults(direction) {
      if (searchResultsData.length === 0) return;
      
      if (direction === 'down') {
        currentHighlightIndex = Math.min(currentHighlightIndex + 1, searchResultsData.length - 1);
      } else if (direction === 'up') {
        currentHighlightIndex = Math.max(currentHighlightIndex - 1, -1);
      }
      
      highlightResult(currentHighlightIndex);
    }

    function selectHighlightedResult() {
      if (currentHighlightIndex >= 0 && currentHighlightIndex < searchResultsData.length) {
        const selectedResult = searchResultsData[currentHighlightIndex];
        window.location.href = selectedResult.url;
      }
    }

    // Event listeners
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value;
      
      if (query.length > 0) {
        searchClear.style.display = 'block';
      } else {
        searchClear.style.display = 'none';
        hideResults();
        return;
      }

      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        searchPosts(query);
      }, 300); // Debounce search
    });

    searchClear.addEventListener('click', () => {
      searchInput.value = '';
      searchClear.style.display = 'none';
      hideResults();
      searchInput.focus();
    });

    closeSearch.addEventListener('click', () => {
      hideResults();
      searchInput.blur();
    });

    // Close search when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.search-container') && isSearchVisible) {
        hideResults();
      }
    });

    // Keyboard navigation
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideResults();
        searchInput.blur();
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        navigateResults('down');
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        navigateResults('up');
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (currentHighlightIndex >= 0) {
          selectHighlightedResult();
        } else if (searchResultsData.length > 0) {
          // If no item is highlighted, select the first result
          window.location.href = searchResultsData[0].url;
        }
      }
    });

    // Track search events
    searchInput.addEventListener('input', (e) => {
      if (e.target.value.length > 2) {
        if (typeof gtag !== 'undefined') {
          gtag('event', 'search', {
            search_term: e.target.value,
            event_category: 'engagement',
            event_label: 'blog_search'
          });
        }
      }
    });

    // Initialize
    loadPostsData();
  });
</script>
