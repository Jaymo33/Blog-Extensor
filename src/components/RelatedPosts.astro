---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  currentPost: CollectionEntry<'blog'>;
  maxPosts?: number;
}

const { currentPost, maxPosts = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Extract current post's category and tags
const currentCategory = currentPost.slug.split('/')[0];
const currentTags = currentPost.data.tags || [];
const currentTitle = currentPost.data.title.toLowerCase();

// Function to calculate similarity score
function calculateSimilarity(post: CollectionEntry<'blog'>): number {
  let score = 0;
  
  // Same category gets highest priority
  const postCategory = post.slug.split('/')[0];
  if (postCategory === currentCategory) {
    score += 100;
  }
  
  // Tag overlap
  const postTags = post.data.tags || [];
  const commonTags = currentTags.filter(tag => postTags.includes(tag));
  score += commonTags.length * 20;
  
  // Title similarity (simple keyword matching)
  const postTitle = post.data.title.toLowerCase();
  const currentWords = currentTitle.split(' ');
  const postWords = postTitle.split(' ');
  const commonWords = currentWords.filter(word => 
    word.length > 3 && postWords.includes(word)
  );
  score += commonWords.length * 10;
  
  // Date recency (newer posts get slight boost)
  const daysSincePublished = (Date.now() - new Date(post.data.pubDate).getTime()) / (1000 * 60 * 60 * 24);
  if (daysSincePublished < 30) score += 5;
  if (daysSincePublished < 7) score += 10;
  
  return score;
}

// Get related posts (exclude current post)
const relatedPosts = allPosts
  .filter(post => post.slug !== currentPost.slug)
  .map(post => ({
    post,
    score: calculateSimilarity(post)
  }))
  .sort((a, b) => b.score - a.score)
  .slice(0, maxPosts)
  .map(item => item.post);

// Generate URLs for related posts
const relatedPostsWithUrls = relatedPosts.map(post => ({
  ...post,
  url: `/blog/${post.slug}/`,
  category: post.slug.split('/')[0],
  categoryDisplay: post.slug.split('/')[0].replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
}));
---

{relatedPostsWithUrls.length > 0 && (
  <section class="related-posts" aria-labelledby="related-posts-heading">
    <h2 id="related-posts-heading" class="related-posts-title">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
        <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
      </svg>
      Related Articles
    </h2>
    
    <div class="related-posts-grid">
      {relatedPostsWithUrls.map((post) => (
        <article class="related-post-card">
          <div class="related-post-category">
            {post.categoryDisplay}
          </div>
          <h3 class="related-post-title">
            <a href={post.url} class="related-post-link">
              {post.data.title}
            </a>
          </h3>
          <p class="related-post-excerpt">
            {post.data.description || post.data.excerpt || 'Discover more about this topic...'}
          </p>
          <div class="related-post-meta">
            <time datetime={post.data.pubDate.toISOString()}>
              {new Date(post.data.pubDate).toLocaleDateString('en-GB', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>
        </article>
      ))}
    </div>
  </section>
)}

<style>
  .related-posts {
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid #e5e5e5;
  }

  .related-posts-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.5rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
    font-family: 'Open Sans', Arial, Helvetica, sans-serif;
  }

  .related-posts-title svg {
    color: #FF6B35;
  }

  .related-posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .related-post-card {
    background: #FFF8ED;
    border-radius: 8px;
    padding: 1.5rem;
    border: 1px solid #FFE4CC;
    transition: all 0.2s ease;
  }

  .related-post-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: #FF6B35;
  }

  .related-post-category {
    display: inline-block;
    background: #FF6B35;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.75rem;
  }

  .related-post-title {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
    line-height: 1.4;
  }

  .related-post-link {
    color: #333;
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease;
  }

  .related-post-link:hover {
    color: #FF6B35;
    text-decoration: underline;
  }

  .related-post-excerpt {
    color: #666;
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0 0 1rem 0;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-post-meta {
    font-size: 0.8rem;
    color: #999;
  }

  .related-post-meta time {
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .related-posts-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .related-post-card {
      padding: 1rem;
    }
    
    .related-posts-title {
      font-size: 1.25rem;
    }
  }
</style>

<script>
  // Track related post clicks for analytics
  document.addEventListener('DOMContentLoaded', () => {
    const relatedPostLinks = document.querySelectorAll('.related-post-link');
    
    relatedPostLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        const postTitle = this.textContent.trim();
        const postUrl = this.getAttribute('href');
        
        // Track in Google Analytics
        if (typeof gtag !== 'undefined') {
          gtag('event', 'related_post_click', {
            post_title: postTitle,
            post_url: postUrl,
            event_category: 'engagement',
            event_label: 'related_posts'
          });
        }
        
        // Track in A/B testing
        if (typeof abTesting !== 'undefined') {
          abTesting.trackEvent('related_post_click', {
            post_title: postTitle,
            post_url: postUrl,
            timestamp: new Date().toISOString()
          });
        }
        
        console.log(`Related post clicked: ${postTitle}`);
      });
    });
  });
</script>
