---
export const prerender = true;
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Pagination settings
const POSTS_PER_PAGE = 24; // 24 posts per page (good for grid layouts)

// Get all blog posts sorted by publication date
const posts = await getCollection('blog');
const sortedPosts = posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Get current page from URL parameter
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const totalPosts = sortedPosts.length;
const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE);

// Validate page number
const validPage = Math.max(1, Math.min(currentPage, totalPages));

// Calculate pagination
const startIndex = (validPage - 1) * POSTS_PER_PAGE;
const endIndex = startIndex + POSTS_PER_PAGE;
const paginatedPosts = sortedPosts.slice(startIndex, endIndex);

// Generate pagination URLs
const getPageUrl = (page: number) => {
  const url = new URL(Astro.url);
  if (page === 1) {
    url.searchParams.delete('page');
  } else {
    url.searchParams.set('page', page.toString());
  }
  return url.pathname + url.search;
};

// SEO metadata
const title = validPage === 1 ? 'Blog | Air Fryer Recipes' : `Blog - Page ${validPage} | Air Fryer Recipes`;
const description = 'Find out more more about Air Fryer Recipes.co.uk and explore what your Air Fryer has to offer!';
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href;
---

<style>
  @import '/css/blog-cards.css';
  
  /* Blog Stats */
  .blog-stats {
    color: #666;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    font-weight: 500;
  }

  /* Pagination Styles */
  .pagination {
    margin-top: 3rem;
    padding: 2rem 0;
    border-top: 1px solid #e5e7eb;
  }

  .pagination-info {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #666;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .pagination-btn {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    background: #FF6B35;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .pagination-btn:hover {
    background: #e55a2b;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
  }

  .pagination-btn--disabled {
    background: #d1d5db;
    color: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .pagination-btn--disabled:hover {
    background: #d1d5db;
    transform: none;
    box-shadow: none;
  }

  .pagination-numbers {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .pagination-number {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background: white;
    color: #374151;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.9rem;
    border: 1px solid #d1d5db;
    transition: all 0.3s ease;
  }

  .pagination-number:hover {
    background: #f3f4f6;
    border-color: #FF6B35;
    color: #FF6B35;
  }

  .pagination-number--current {
    background: #FF6B35;
    color: white;
    border-color: #FF6B35;
    font-weight: 600;
  }

  .pagination-ellipsis {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    color: #9ca3af;
    font-weight: 500;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .pagination-controls {
      gap: 0.5rem;
    }

    .pagination-btn {
      padding: 0.6rem 1rem;
      font-size: 0.85rem;
    }

    .pagination-number {
      width: 36px;
      height: 36px;
      font-size: 0.85rem;
    }

    .pagination-ellipsis {
      width: 36px;
      height: 36px;
    }

    .pagination-numbers {
      gap: 0.25rem;
    }
  }

  @media (max-width: 480px) {
    .pagination-controls {
      flex-direction: column;
      gap: 1rem;
    }

    .pagination-numbers {
      order: -1;
    }
  }
</style>

<Layout title={title} description={description} canonical={canonicalURL} currentTitle="Blog">
    <div class="container">
     
      <div class="blog-header">
        <h1>Discover Our Air Fryer Blogs!</h1>
        <p class="blog-stats">
          Showing {startIndex + 1}-{Math.min(endIndex, totalPosts)} of {totalPosts.toLocaleString()} posts
          {validPage > 1 && ` (Page ${validPage} of ${totalPages})`}
        </p>
      </div>
      
      <div class="blog-cards-container">
        {paginatedPosts.map((post) => (
          <a href={`/blog/${post.slug}/`} class="blog-card">
            {post.data.heroImage ? (
              <img 
                src={post.data.heroImage} 
                loading="lazy" 
                alt={post.data.description || post.data.title} 
                class="blog-card-image"
              />
            ) : (
              <div class="blog-card-image-placeholder"></div>
            )}
            <div class="blog-card-content">
              <h2 class="blog-card-title">{post.data.title}</h2>
              <p class="blog-card-description">{post.data.description}</p>
              <div class="blog-card-footer">
               
               
              </div>
            </div>
          </a>
        ))}
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <nav class="pagination" aria-label="Blog pagination">
          <div class="pagination-info">
            Page {validPage} of {totalPages}
          </div>
          
          <div class="pagination-controls">
            {/* Previous Button */}
            {validPage > 1 ? (
              <a href={getPageUrl(validPage - 1)} class="pagination-btn pagination-btn--prev">
                ← Previous
              </a>
            ) : (
              <span class="pagination-btn pagination-btn--disabled">← Previous</span>
            )}

            {/* Page Numbers */}
            <div class="pagination-numbers" set:html={(() => {
              const maxVisiblePages = 7;
              let startPage = Math.max(1, validPage - Math.floor(maxVisiblePages / 2));
              let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
              
              // Adjust start if we're near the end
              if (endPage - startPage < maxVisiblePages - 1) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
              }

              let html = '';

              // First page + ellipsis
              if (startPage > 1) {
                html += `<a href="${getPageUrl(1)}" class="pagination-number">1</a>`;
                if (startPage > 2) {
                  html += '<span class="pagination-ellipsis">...</span>';
                }
              }

              // Page numbers
              for (let i = startPage; i <= endPage; i++) {
                if (i === validPage) {
                  html += `<span class="pagination-number pagination-number--current">${i}</span>`;
                } else {
                  html += `<a href="${getPageUrl(i)}" class="pagination-number">${i}</a>`;
                }
              }

              // Ellipsis + last page
              if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                  html += '<span class="pagination-ellipsis">...</span>';
                }
                html += `<a href="${getPageUrl(totalPages)}" class="pagination-number">${totalPages}</a>`;
              }

              return html;
            })()}></div>

            {/* Next Button */}
            {validPage < totalPages ? (
              <a href={getPageUrl(validPage + 1)} class="pagination-btn pagination-btn--next">
                Next →
              </a>
            ) : (
              <span class="pagination-btn pagination-btn--disabled">Next →</span>
            )}
          </div>
        </nav>
      )}
    </div>
</Layout>