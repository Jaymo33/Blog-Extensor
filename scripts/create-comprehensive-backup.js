#!/usr/bin/env node

/**
 * Comprehensive Backup Script
 * Creates a complete backup including all scripts, documentation, and configuration files
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function createBackup() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  const backupDir = `backups/backup-${timestamp}`;
  
  console.log(`Creating comprehensive backup: ${backupDir}`);
  
  // Create backup directory
  if (!fs.existsSync('backups')) {
    fs.mkdirSync('backups');
  }
  fs.mkdirSync(backupDir);
  
  // Files and directories to backup
  const backupItems = [
    // Core configuration
    'astro.config.mjs',
    'package.json',
    'package-lock.json',
    'tsconfig.json',
    '.env',
    
    // Source code
    'src/',
    
    // Public assets
    'public/',
    
    // Scripts and utilities
    'scripts/',
    
    // Functions
    'functions/',
    
    // Templates
    'templates/',
    
    // Documentation
    'README.md',
    
    // Cloudflare worker
    'cloudflare-worker.js',
    
    // Additional config files
    'webflow-faq-schemas.json'
  ];
  
  // Copy each item
  backupItems.forEach(item => {
    const sourcePath = item;
    const destPath = path.join(backupDir, item);
    
    if (fs.existsSync(sourcePath)) {
      if (fs.statSync(sourcePath).isDirectory()) {
        copyDirectory(sourcePath, destPath);
        console.log(`‚úì Copied directory: ${sourcePath}`);
      } else {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`‚úì Copied file: ${sourcePath}`);
      }
    } else {
      console.log(`‚ö† Skipped (not found): ${sourcePath}`);
    }
  });
  
  // Create backup documentation
  const backupReadme = `# Backup - ${timestamp}

## Backup Contents
This backup contains ALL core components of the Blog-Extensor setup:

### Core Configuration
- astro.config.mjs - Astro configuration
- package.json & package-lock.json - Dependencies
- tsconfig.json - TypeScript configuration
- .env - Environment variables

### Source Code
- src/ - Complete source directory
- public/ - Static assets
- functions/ - Serverless functions
- scripts/ - All utility scripts
- templates/ - Content templates

### Documentation & Config
- README.md - Project documentation
- cloudflare-worker.js - Cloudflare worker
- webflow-faq-schemas.json - FAQ schemas

### Current Features
‚úÖ Complete SEO infrastructure
‚úÖ JSON-LD schemas (BlogPosting, FAQPage, HowTo, Review)
‚úÖ Table of Contents with jump-to-section links
‚úÖ Reading progress bars (top and bottom)
‚úÖ Related posts widget
‚úÖ Newsletter integration (Mailchimp)
‚úÖ Search functionality with keyboard navigation
‚úÖ Pagination for blog listing
‚úÖ Google Analytics 4 integration
‚úÖ Microsoft Clarity heatmap tracking
‚úÖ A/B testing framework
‚úÖ Social sharing tracking
‚úÖ Image optimization and lazy loading
‚úÖ Performance optimizations
‚úÖ International SEO (hreflang tags)
‚úÖ Canonical URL optimization

## Rollback Instructions
1. Copy files from this backup to project root
2. Run: npm install
3. Run: npm run build
4. Deploy as needed

---
Backup created: ${timestamp}
Status: Comprehensive backup with all scripts and documentation
`;
  
  fs.writeFileSync(path.join(backupDir, 'BACKUP-README.md'), backupReadme);
  
  // Update backup index
  updateBackupIndex(backupDir, timestamp);
  
  console.log(`\n‚úÖ Comprehensive backup created: ${backupDir}`);
  console.log('üìÅ Includes: Core config, source code, scripts, templates, documentation');
  console.log('üìã Backup documentation created');
  console.log('üìñ Backup index updated');
}

function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

function updateBackupIndex(backupDir, timestamp) {
  const indexPath = 'backups/BACKUP-INDEX.md';
  
  if (!fs.existsSync(indexPath)) {
    console.log('‚ö† Backup index not found, skipping update');
    return;
  }
  
  let content = fs.readFileSync(indexPath, 'utf8');
  
  // Add new backup entry after the header
  const newEntry = `### Latest: \`${path.basename(backupDir)}\`
**Date:** ${timestamp.replace(/-/g, ' ').replace('T', ' - ')}  
**Status:** ‚úÖ Latest comprehensive backup  
**Features:** Complete implementation with all scripts and documentation
- ‚úÖ All core configuration files
- ‚úÖ Complete source code and components
- ‚úÖ All utility scripts and templates
- ‚úÖ Documentation and README files
- ‚úÖ Cloudflare worker configuration
- ‚úÖ All current features (see BACKUP-README.md for full list)

`;
  
  // Insert after "## Available Backups"
  content = content.replace(
    /(## Available Backups\n)/,
    `$1${newEntry}`
  );
  
  // Update the "Last Updated" timestamp
  content = content.replace(
    /(\*\*Last Updated:\*\* ).*/,
    `$1${timestamp.replace('T', ' ')}`
  );
  
  fs.writeFileSync(indexPath, content);
}

// Run the backup
createBackup();

export { createBackup };
